services:
  taskmanager:
    platform: linux/amd64
    build:
      context: ./
      dockerfile: flink.Dockerfile
    container_name: network-rails.taskmanager
    hostname: taskmanager
    depends_on:
      - jobmanager
    command: taskmanager
    privileged: true
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 6

      - JUICEFS_META_URL=${JUICEFS_META_URL}
      - AWS_URI=${AWS_URI}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./src/usrcode:/opt/flink/usrcode

  jobmanager:
    platform: linux/amd64
    build:
      context: ./
      dockerfile: flink.Dockerfile
    container_name: network-rails.jobmanager
    hostname: jobmanager
    ports:
      - "8082:8082"
    command: jobmanager
    privileged: true
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        rest.address: jobmanager
        rest.port: 8082

      - JUICEFS_META_URL=${JUICEFS_META_URL}
      - AWS_URI=${AWS_URI}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./src/usrcode:/opt/flink/usrcode

  redis:
    image: redis:latest
    container_name: network-rails.redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: network-rails.zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    container_name: network-rails.kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "rail_network:1:1,output-topic:1:1,rtti-schedule:1:1,rtti-ts:1:1,rtti-joined:1:1,rtti-lsh-signature:1:1,rtti-lsh-similarity"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    
  minio:
    image: quay.io/minio/minio
    container_name: network-rails.minio
    ports:
      - "9000:9000" # API port
      - "9001:9001" # Console port
    environment:
      # Root credentials for MinIO
      MINIO_ROOT_USER: ${MINIO_ROOT_USER} # Default user if not set in .env
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD} # Default password if not set in .env
      # Bucket to create on startup
      MINIO_DEFAULT_BUCKET: ${MINIO_DEFAULT_BUCKET} # Default bucket name if not set in .env
    # Command to start MinIO server and expose the console
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data


volumes:
  redis_data:
  minio_data:
